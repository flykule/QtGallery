#include "albumdao.h"
#include "databasemanager.h"
#include <QVariant>
#include <QSqlDatabase>
#include <QSqlQuery>

AlbumDao::AlbumDao(QSqlDatabase &database) : mDatabase(database) {}

void AlbumDao::addAlbum(Album &album) const
{
    QSqlQuery query(mDatabase);
    query.prepare("INSERT INTO albums (name) VALUES (:name)");
    query.bindValue(":name",album.name());
    query.exec();
    album.setId(query.lastInsertId().toInt());
}

void AlbumDao::updateAlbum(const Album &album) const
{
    QSqlQuery query(mDatabase);
    query.prepare("UPDATE albums SET name=:name WHERE id=:id");
    query.bindValue(":name",album.name());
    query.bindValue(":id",album.id());
    query.exec();
}

void AlbumDao::removeAlbum(int id) const
{
    QSqlQuery query(mDatabase);
    query.prepare("DELETE FROM albums WHERE id=:id");
    query.bindValue(":id",id);
    query.exec();
}

QVector<Album *> AlbumDao::albums() const
{
    QSqlQuery query(mDatabase);
    query.exec("SELECT * FROM albums");
    QVector<Album*> list;
    while (query.next()) {
        Album *localAlbum = new Album();
        localAlbum->setId(query.value("id").toInt());
        localAlbum->setName(query.value("name").toString());
        list.append(album);
    }
    return list;
}

void AlbumDao::init() const {
  // create table if not exist
  if (!mDatabase.tables().contains("albums")) {
    QSqlQuery query(mDatabase);
    query.exec("CREATE TABLE albums (id INTEGER PIMAREY KEY "
               "AUTOINCREMENT, name TEXT)");
  }
}
